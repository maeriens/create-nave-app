{"version":3,"sources":["nave.png","gabi.png","App.js","serviceWorker.js","index.js"],"names":["IMAGES","gabi","nave","App","useState","image","setImage","action","code","onTimeout","timeout","className","src","alt","target","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAAe,MAA0B,iCCA1B,MAA0B,iC,eCMnCA,EAAS,CACbC,OACAC,QA2CaC,EAxCH,WACV,MAA0BC,mBAASJ,EAAOE,MAA1C,mBAAOG,EAAP,KAAcC,EAAd,KAEA,OACE,qCACE,cAAC,IAAD,CACEC,OAAQ,kBAAMD,EAASN,EAAOC,OAC9BO,KAAM,CAAC,GAAI,GAAI,GAAI,IACnBC,UAAW,kBAAMH,EAASN,EAAOE,OACjCQ,QAAS,MAEX,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKP,EAAOM,UAAU,WAAWE,IAAI,SAC1C,iDACA,4CACA,sGACA,kDACmB,mBACfF,UAAU,OACVG,OAAO,SACPC,IAAI,sBACJC,KAAK,8CAJU,wBADnB,wBASA,mBACEL,UAAU,WACVK,KAAK,6CACLF,OAAO,SACPC,IAAI,sBAJN,yCCzBUE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d6abd267.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/nave.4a254750.png\";","export default __webpack_public_path__ + \"static/media/gabi.1a81bf98.png\";","import React, { useState } from 'react';\nimport Konami from 'react-konami-code';\nimport nave from './nave.png';\nimport gabi from './gabi.png';\nimport './App.css';\n\nconst IMAGES = {\n  gabi,\n  nave\n}\n\nconst App = () => {\n  const [image, setImage] = useState(IMAGES.nave);\n\n  return (\n    <>\n      <Konami\n        action={() => setImage(IMAGES.gabi)}\n        code={[71, 65, 66, 73]}\n        onTimeout={() => setImage(IMAGES.nave)}\n        timeout={5000}\n      />\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={image} className=\"App-logo\" alt=\"logo\" />\n          <p>In Nave Memorian</p>\n          <p>2016 - 2020</p>\n          <p>No se murió pero en Suecia debe ser de noche y estará durmiendo</p>\n          <p>\n            Mandale cumbia y <a\n              className=\"repo\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=\"https://github.com/maeriens/create-nave-app\">\n              PR al repo\n          </a> y sale con fritas\n        </p>\n          <a\n            className=\"App-link\"\n            href=\"https://www.instagram.com/federiconaveira/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Peer into the Nave\n        </a>\n        </header>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}